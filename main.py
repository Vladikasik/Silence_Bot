import telebot
import var
from messages import *
from print_data import *
import keyboard
import transfer
from datetime import datetime

#—Å–ø–∏—Å–æ–∫ —Å–ø–∞–º–º–µ—Ä–æ–≤ - –≤ –¥–∞–ª—å–Ω–µ–π—à–µ–º –Ω—É–∂–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏ —Å—á–∏—Ç—ã–≤–∞—Ç—å –∏–∑ —Ñ–∞–π–ª–∞, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ, –Ω–æ —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞—Ç—å —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞
block_user = {
    872683288: datetime(2019, 12, 21),   #–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –î–∞–≤–∏–¥–∞ –¥–æ 21.12.2019
}

def main():
    bot = telebot.TeleBot(var.token_of_bot)
    
    def print_log(msg):
        print('[' + strftime('%x %X') + ' >> ' + str(msg.chat.id) + ']:')
        print('msg:',msg.text)
    
##### –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
    @bot.message_handler(commands=['start'])
    def start_message(msg):
        print_log(msg)
        bot.register_next_step_handler(
            bot.send_message(msg.chat.id, msg_start, reply_markup=keyboard.markup),
            add_userId)
        
    # –ü–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /start
    def add_userId(msg):
        print_log(msg)
    
        data = load_users()

        for user in data:# –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ ChatId –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω–æ–º—É –∫–æ–¥—É
            if user['InviteCode'] == msg.text:
                if user['TelegramChatId'] == '':
                    indexx = data.index(user)
                    data[indexx]['TelegramChatId'] = str(msg.chat.id)
                    print('The new ChatId has been set done.')
                    bot.send_message(msg.chat.id,msg_done_id)
                break
        save_users(data)

##### –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help
    @bot.message_handler(commands=['help'])
    def help_message(msg):
        print_log(msg)
        bot.send_message(msg.chat.id, msg_help)
        
##### –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /any
    @bot.message_handler(commands=['any'])
    def any_message(msg):
        print_log(msg)
        bot.register_next_step_handler(bot.send_message(msg.chat.id,msg_any),save_any)
        
    def save_any(msg):
        with open('/home/project/database/support.txt','a') as file:
            support_message = str(msg.text) + '\n'
            file.write(support_message)
            file.close()
        bot.send_message(msg.chat.id,msg_any_done)
        #bot.send_message(var.support_telegram_id,msg.text) #–æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–º—É –∫–æ–Ω—Ç–∞–∫—Ç—É

##### –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /approve - —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    @bot.message_handler(commands=['approve'])
    def approve_message(msg):
        print_log(msg)
        
        admin = get_user(msg.chat.id)
        
        if type(admin) != dict:
            print('User data error')
            bot.send_message(msg.chat.id,'–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.')
            return
        elif admin['Group'] != 'Admin':
            print('No admin permission')
            bot.send_message(msg.chat.id,'–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤. –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.')
            return    
        
        pend = load_pending()
        n = len(pend)
        if n > 0:
            t = pend.pop()
            text = '–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è:\n' + str(t) + '\n(–í—Å–µ–≥–æ: ' + str(n) + ')\n–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é?\n(–î–∞ / –ù–µ—Ç / –û—Ç–ª–æ–∂–∏—Ç—å)'
            print(text)
            bot.register_next_step_handler(
                bot.send_message(msg.chat.id, text, reply_markup=keyboard.markup_admin),
                approve)
        else:
            print('No pending trasactions')
            bot.send_message(msg.chat.id,'–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –Ω–µ—Ç.')        
        
    def approve(msg):
        print_log(msg)
        
        admin = get_user(msg.chat.id)
        
        if msg.text == '–û—Ç–ª–æ–∂–∏—Ç—å':
            print('Okay, do it later...')
            bot.send_message(msg.chat.id,'–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –æ—Ç–ª–æ–∂–µ–Ω–∞.', reply_markup=keyboard.markup)
            return              
   
        pend = load_pending()     #–∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        
        if len(pend) == 0:        #–Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å
            print('Error len = 0')
            bot.send_message(msg.chat.id,'Error len = 0', reply_markup=keyboard.markup)
            return

        t = pend.pop()            #–≤–∑—è—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é

        if msg.text == '–ù–µ—Ç':
            save_pending(pend)

            print('Transaction has been declained.')
            bot.send_message(msg.chat.id,'–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.', reply_markup=keyboard.markup)
            
        elif msg.text == '–î–∞':
            name1 = t['From']
            name2 = t['To']
            value = int(t['Value'])    

            user1 = ''
            user2 = ''
            data = load_users()
            for u in data:
                if u['Surname'] == name1:
                     user1 = u
                elif u['Surname'] == name2:
                     user2 = u
        
            if (type(user1) != dict) | (type(user2) != dict):
                print('User data error in transaction')
                bot.send_message(msg.chat.id,'User data error in transaction', reply_markup=keyboard.markup)
                return
            
            if name1 == name2:
                print('Same user error in transaction')
                bot.send_message(msg.chat.id,'–ù–µ–ª—å–∑—è –æ—Å—É—â–µ—Å—Ç–≤–ª—è—Ç—å –ø–µ—Ä–µ–≤–æ–¥ —Å–∞–º–æ–º—É —Å–µ–±–µ.', reply_markup=keyboard.markup)
                return    
            
            print(name1,'->',name2)
            print('before:', user1['Balance'], '->', user2['Balance'])
            
            # –∑–¥–µ—Å—å –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –æ—Å–Ω–æ–≤–Ω–æ–π –ø–µ—Ä–µ–≤–æ–¥! -------------------------
            user2['Balance'] = str(int(user2['Balance']) + value)

            if user1['Group'] == 'Student':
                user1['Balance'] = str(int(user1['Balance']) - value)
            # ------------------------------------------------------------
            
            save_pending(pend)
            save_users(data)
            
            print('after:', user1['Balance'], '->', user2['Balance'])
            print('Transaction has been approved.')
            
            # —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 2
            text = str() + user1['Surname'] + user1['Name']
            text += ' —Å–Ω—è–ª(–∞) —Å –í–∞—Å ' if (value < 0) else ' –ø–µ—Ä–µ–≤–µ–ª(–∞) –í–∞–º '
            text += str(abs(value)) + 'ü•≠.'
            
            bot.send_message(int(user2['TelegramChatId']), text, reply_markup=keyboard.markup)
            bot.send_message(msg.chat.id, '–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞.', reply_markup=keyboard.markup)

    
##### –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏–ª–∏ –∫–Ω–æ–ø–æ–∫
    @bot.message_handler(func=lambda msg: True)
    def main_func(msg):
        #–ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ —Å–ø–∞–º-—Å–ø–∏—Å–∫—É
        block_date = block_user.get( msg.chat.id )
        if block_date != None:
            if datetime.now() < block_date:
                return  #–µ—Å–ª–∏ –¥–µ–¥–ª–∞–π–Ω –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —é–∑–µ—Ä–∞ –Ω–µ –ø—Ä–æ—à–µ–ª, —Ç–æ –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ

        print_log(msg)

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ë–∞–ª–∞–Ω—Å"
        if msg.text == keyboard.bttn_info:
            bot.send_message(msg.chat.id, str_user(msg.chat.id))

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ü–µ—Ä–µ–≤–æ–¥"
        elif msg.text == keyboard.bttn_send:
            bot.register_next_step_handler(
                bot.send_message(msg.chat.id, msg_trans),
                do_trans)

        elif msg.text == 'KillTheBotRightNow':
            bot.send_message(msg.chat.id, '–í—ã —É–±–∏–ª–∏ –±–æ—Ç–∞. –ù–∏ –æ–¥–Ω–æ –∂–∏–≤–æ–µ —Å—É—â–µ—Å—Ç–≤–æ –Ω–µ –ø–æ—Å—Ç—Ä–∞–¥–∞–ª–æ.')
            a = 1 / 0
            print(a)

        else:
            bot.send_message(msg.chat.id, msg_help)

    # –ü–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã "–ü–µ—Ä–µ–≤–æ–¥"
    def do_trans(msg):
        print('after trans')
        print('msg:', msg.text, 'id:', msg.chat.id)
        
        user = get_user(msg.chat.id)
        if type(user) == dict:
            a = transfer.trans(msg.chat.id, msg.text)   #–≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø—Ä–æ–≤–µ—Ä–∫–∞
            a.printt_before()

            if a.user_exists:
                if user['Group'] == 'Student':
                    bot.send_message(msg.chat.id,msg_user_can_not)
                elif (user['Group'] == 'Teacher') | (user['Group'] == 'Admin'):
                    if a.availavle_for_teacher():
                        a.do_teacher()
                        bot.send_message(msg.chat.id, msg_good_tr)
                        a.printt_after()
                    else:
                        bot.send_message(msg.chat.id, msg_wrong_tr)
                else:
                    bot.send_message(msg.chat.id, msg_wrong_st)
            else:
                bot.send_message(msg.chat.id,msg_user_not_exsist)


    try:
        bot.polling(none_stop=True)
    except:
        pass

if __name__ == '__main__':
    main()
